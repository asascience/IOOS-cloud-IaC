AWSTemplateFormatVersion: "2010-09-09"
Description: >-
  RPS IOOS-Cloud Cluster: AWS EC2 instances with needed libraries for NOAA's NOSOFS models.

Parameters:
  KeyName:
    Description: Name of an existing EC2 KeyPair to enable SSH access to the web server
    Type: "AWS::EC2::KeyPair::KeyName"
    ConstraintDescription: must be the name of an existing EC2 KeyPair.
  InstanceType:
    Description: Base EC2 instance type
    Type: String
    AllowedValues:
      - c5n.xlarge	 # 4 vcpu
      - c5n.2xlarge  # 8 vcpu
      - c5n.4xlarge  # 16 vcpu
      - c5n.9xlarge  # 36 vcpu 18 cores
      - c5n.18xlarge # 48 vcpu - EFA capable
    Default: c5n.2xlarge
    ConstraintDescription: must be a valid EC2 instance type.
#  SSHLocation:
#    Description: >-
#      Lockdown SSH access to the bastion host (default can be accessed from
#      anywhere). Specify your public IP here for tighter security.
#    Type: String
#    MinLength: "9"
#    MaxLength: "18"
#    Default: 0.0.0.0/0
#    AllowedPattern: '(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})'
#    ConstraintDescription: must be a valid CIDR range of the form x.x.x.x/x.
#  SubnetCIDR:
#    Description: "Define CIDR range of the subnet to create"
#    Type: String
#    MinLength: "9"
#    MaxLength: "18"
#    Default: 10.0.0.0/28
#    AllowedPattern: '(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})'
#    ConstraintDescription: must be a valid CIDR range of the form 10.0.x.x/x.


Resources:

  # IAM Role - Role to save output to S3
  InstanceRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - "ec2.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      ManagedPolicyArns:
        - "arn:aws:iam::579273261343:policy/IOOS-cloud-sandbox-S3-policy"
                    
  
  # IAM - Instance Profile
  InstanceProfile:
    Type: "AWS::IAM::InstanceProfile"
    DependsOn: InstanceRole
    Properties:
      Roles:
        - !Ref InstanceRole

  # Internet Gateway
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties: {}

  GatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: vpc-039661fdd9f2a896e
      InternetGatewayId: !Ref InternetGateway

  # RouteTable
  RouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: vpc-039661fdd9f2a896e
  
  SubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref Subnet
      RouteTableId: !Ref RouteTable
  
  #InternetRoute:
  #  Type: AWS::EC2::Route
  #  DependsOn: GatewayAttachment
  #  Properties:
  #    RouteTableId: !Ref RouteTable
  #    DestinationCidrBlock: 0.0.0.0/0
  #    GatewayId: !Ref InternetGateway
  
  # Route subnet ssh traffic to SSH
  # Is this needed with the above? NO. InternetRoute above is needed so we can install items from Internet.
  #SSHRoute:
  #  Type: AWS::EC2::Route
  #  DependsOn: GatewayAttachment
  #  Properties:
  #     RouteTableId: !Ref RouteTable
  #     DestinationCidrBlock: !Ref SSHLocation
  #     GatewayId: !Ref InternetGateway
  
  
  # Create a small subnet for this setup
  # This must be changed for each concurrent instance, can't overlap subnets in same vpc
  Subnet:
    Type: AWS::EC2::Subnet
    Properties:
      # Use this VPC IOOS-cloud-sandbox VPC
      VpcId: vpc-039661fdd9f2a896e
      # address ranges 10.0.X.X/16, 10.0.0.X/24
      # CidrBlock: !Ref SubnetCIDR # /16 will use entire vpc
      CidrBlock: 10.0.1.0/28
      AvailabilityZone: "us-east-1a"
      Tags:
      - Key: NAME 
        Value: IOOS-cloud-sandbox CFN Subnet
      - Key: Name 
        Value: IOOS-cloud-sandbox

  #EC2SecurityGroup:
  #  Type: "AWS::EC2::SecurityGroup"
  #  Properties:
  #    GroupDescription: SSH access
  #    VpcId: vpc-039661fdd9f2a896e
  #    #GroupName: "secgrp-iooscloud-1"
  #    SecurityGroupIngress:
  #      - IpProtocol: tcp
  #        FromPort: "22"
  #        ToPort: "22"
  #        CidrIp: !Ref SSHLocation

  EC2Instance:
    Type: "AWS::EC2::Instance"
    DependsOn: 
      - InstanceProfile
    Properties:
      # Cant have with NetworkInterface - SubnetId: !Ref Subnet
      KeyName: !Ref KeyName
      InstanceType: !Ref InstanceType
      # CentOS7 Public Base Image
      IamInstanceProfile: !Ref InstanceProfile 
      ImageId: ami-0d438fa29f98e6b91  # us-east-1 my updated centos image
      #ImageId: ami-02eac2c0129f6376b  # us-east-1 centos public image
      # Cant have this with NetoworkInterface
      #SecurityGroupIds: 
      #  - Fn::GetAtt: "EC2SecurityGroup.GroupId"
      NetworkInterfaces:
      - GroupSet: 
        - Ref: EC2SecurityGroup
        AssociatePublicIpAddress: 'true'
        DeviceIndex: '0'
        DeleteOnTermination: 'true'
        SubnetId: !Ref Subnet
      BlockDeviceMappings:
        - DeviceName: /dev/sda1
          Ebs:
            VolumeSize: 16
      UserData: 
        # Can try using runcmd instead:
        # runcmd:
        # See: https://gist.github.com/gene1wood/a00d0b9d029f40e866df
        Fn::Base64: 
          !Sub |
            MIME-Version: 1.0
            Content-Type: text/x-shellscript; charset="us-ascii"
            #!/bin/bash -x
            ## Install the cfn tools (not included in non AMZL images).
            yum -y install git
            tries=0
            until git clone https://github.com/aws-quickstart/quickstart-linux-utilities.git
            do 
              echo "Retrying"
              ((tries=$tries + 1))
              if [ $tries -eq 3 ] ; then
                echo "Unable to retrieve quickstart-linux-utilities"
                break
              fi
            done
            cd /quickstart-linux-utilities
            source quickstart-cfn-tools.source
            qs_update-os || qs_err
            qs_bootstrap_pip || qs_err
            qs_aws-cfn-bootstrap || qs_err
            # Run the cloud formation initialization 
            /usr/bin/cfn-init -v --stack ${AWS::StackName} --resource EC2Instance --region ${AWS::Region} --configsets install_run
            # See: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/cfn-signal.html
            # use the cfn-signal script in conjunction with a CreationPolicy or an Auto Scaling group with a WaitOnResourceSignals update policy
            # /usr/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource EC2Instance --region ${AWS::Region}
            ## End of shell script
    Metadata:
      'AWS::CloudFormation::Init':
        configSets:
          install_run:
            # - setup_base_env
            - install_libs
            - install_impi
            - copy_impi_module
            - install_cbofs
            - fix_perms
        setup_base_env:
          packages:
            yum:
              environment-modules: []
              tcsh: []
              ksh:  []
              wget: []
              glibc-devel: []
              awscli: []
          files:
            /tmp/setup_env.sh:
              content: !Join
                - ''
                - - |
                    #!/bin/bash -ex
                    mkdir -p /ptmp ; chgrp wheel /ptmp ; chmod 775 /ptmp
                    mkdir -p /noscrub/com/nos ; chgrp -R wheel /noscrub ; chmod -R g+w /noscrub
                    mkdir -p /save ; chgrp wheel /save ; chmod 775 /save
                    sed -i 's/tsflags=nodocs/# &/' /etc/yum.conf
                    mkdir -p /usrx/modulefiles
                    . /usr/share/Modules/init/sh
                    echo /usrx/modulefiles | tee -a ${MODULESHOME}/init/.modulespath
                    echo . /usr/share/Modules/init/bash >> /etc/profile.d/custom.sh
                    echo source /usr/share/Modules/init/csh >> /etc/profile.d/custom.csh
              mode: '000700'
              owner: root
              group: root
          commands:
            run_setup_env:
              command: ./setup_env.sh
              cwd: /tmp

        install_libs:
          sources:
            /tmp/rpms: https://ioos-cloud-sandbox.s3.amazonaws.com/public/libs/nosofs_base_rpms.gcc.6.5.0.el7.20191011.tgz
          files:
            /tmp/rpms/install_rpms.sh:
              content: !Join
                - ''
                - - |
                    #!/bin/bash -ex
                    yum -y install                      \
                      gcc-6.5.0-1.el7.x86_64.rpm        \
                      hdf5-1.8.21-1.el7.x86_64.rpm      \
                      netcdf-4.2-1.el7.x86_64.rpm       \
                      produtil-1.0.18-1.el7.x86_64.rpm
              mode: '000700'
              owner: root
              group: root
          commands:
            install_rpms:
              cwd: /tmp/rpms
              command: ./install_rpms.sh

        install_impi:
          # 2019.5.281
          sources: 
            /tmp/intel_mpi: https://ioos-cloud-sandbox.s3.amazonaws.com/public/libs/intel_mpi_2019.5.281.tgz
          files:
            /tmp/intel_mpi/install_impi.sh:
              content: !Sub |
                #!/bin/bash
                echo 'Starting Intel MPI silent install...'
                ./install.sh -s silent.cfg 
                echo '... Finished impi silent install'
              mode: '000700'
              owner: root
              group: root
          commands:
            run_install:
              cwd: /tmp/intel_mpi
              command: ./install_impi.sh

        copy_impi_module: 
          # 2019.5.281
          files:
            /tmp/intel_mpi/copy_modulefile.sh:
              content: !Sub |
                #!/bin/bash
                mkdir -p /usrx/modulefiles/mpi/intel
                cp -p /opt/intel/compilers_and_libraries/linux/mpi/intel64/modulefiles/mpi /usrx/modulefiles/mpi/intel/2019.5.281
              mode: '000700'
              owner: root
              group: root
          commands:
            copy_it:
              cwd: /tmp/intel_mpi
              command: ./copy_modulefile.sh
        
        install_cbofs:
          commands:
            cbofsmodel: 
              cwd: /tmp/rpms
              command: "wget https://ioos-cloud-sandbox.s3.amazonaws.com/public/cbofs/nosofs-cbofs-fcst-devel-v3.1.9.1-2.el7.x86_64.rpm; yum -y install /tmp/rpms/nosofs-cbofs-fcst-devel-v3.1.9.1-2.el7.x86_64.rpm"
            ICs:
              cwd: /noscrub/com/nos
              command: "curl https://ioos-cloud-sandbox.s3.amazonaws.com/public/cbofs/ICs.cbofs.2019100100.tgz | tar -xvz; chown -R root /noscrub"
        
        fix_perms:
          commands:
            permissions:
              command: "chgrp -R wheel /save; chmod -R g+w /save; chgrp -R wheel /noscrub; chmod -R g+w /noscrub/com/nos"

        run_forecast:
          files:
            /tmp/runfcst/runit.sh:
              content: !Sub |
                #!/bin/sh -a
                aws s3 cp --recursive s3://ioos-cloud-sandbox/cbofs-output/scripts/ .
                chmod a+x *.sh                 
                . /usr/share/Modules/init/sh
                #echo . /usr/share/Modules/init/bash >> /home/centos/.bashrc
                #echo . /usr/share/Modules/init/bash >> /home/centos/.bash_profile
                module avail
                echo "Starting autorun fcst ..."
                su centos << EOF
                  printenv
                  module avail
                  ./autoRunFcst.sh >& /tmp/runlog.log
                  if [ $? -ne 0 ] ; then 
                    echo "autoRunFcst FAILED"
                  fi
                EOF
                if [ $? -ne 0 ] ; then 
                  echo "su failed to run"
                else
                  echo "Forecast should be complete now. Check S3 for output."
                fi
                shutdown now
              mode: '000755'
              owner: root
              group: wheel
          commands:
            runit:
              cwd: /tmp/runfcst
              command: ./runit.sh
Outputs:
  Instance:
    Value: !GetAtt
      - EC2Instance
      - PublicDnsName
    Description: DNS Name of the newly created EC2 instance
  #StackName: 
  #  Value: !Ref "AWS::StackName"
  #  Description: The name of this stack (used for S3 folder)


# Use this inside instance for s3 key
# curl http://169.254.169.254/latest/meta-data/instance-id
# ex: i-00842f23840d572f2
